#!/usr/bin/env python3

# make_generated_files.py
#
# Copyright The Mbed TLS Contributors
# SPDX-License-Identifier: Apache-2.0 OR GPL-2.0-or-later

"""
Generate the TF-PSA-Crypto generated files
"""

import sys
import argparse
import subprocess
from mbedtls_framework import build_tree
from pathlib import Path

def get_generated_file_paths(generate_file_path: str):
    """
    Get the list of the paths to the files generated by a given script supporting
    the "--list" option.
    """
    file_paths = []
    output = subprocess.check_output([Path(generate_file_path),"--list"], text=True)
    for line in output.splitlines():
        file_paths.append(Path(line))

    return file_paths

def tf_psa_crypto_get_generated_file_paths():
    """
    List the generated files in TF-PSA-Crypto. The path from root is returned
    for each generated files.
    """
    file_paths = [ Path("core/psa_crypto_driver_wrappers.h"),
                   Path("core/psa_crypto_driver_wrappers_no_static.c"),
                   Path("programs/psa/psa_constant_names_generated.c") ]
    file_paths += get_generated_file_paths("framework/scripts/generate_bignum_tests.py")
    file_paths += get_generated_file_paths("framework/scripts/generate_config_tests.py")
    file_paths += get_generated_file_paths("framework/scripts/generate_ecp_tests.py")
    file_paths += get_generated_file_paths("framework/scripts/generate_psa_tests.py")
    file_paths += [ Path("framework/tests/include/test/test_keys.h") ]
   
    return file_paths

def tf_psa_crypto_make_generated_files():
    """
    Generate the configuration independent files for TF-PSA-Crypto.
    """
    subprocess.run(["./scripts/generate_driver_wrappers.py"])
    subprocess.run(["./scripts/generate_psa_constants.py"])
    subprocess.run(["./framework/scripts/generate_bignum_tests.py"])
    subprocess.run(["./framework/scripts/generate_config_tests.py"])
    subprocess.run(["./framework/scripts/generate_ecp_tests.py"])
    subprocess.run(["./framework/scripts/generate_psa_tests.py"])
    subprocess.run(["./framework/scripts/generate_test_keys.py"])

def main():
    """
    Main function of this program
    """
    parser = argparse.ArgumentParser()

    parser.add_argument('--list', action='store_true',
                        default=False, help='List generated files')

    parser.add_argument('--directory', metavar='DIR',
                        help='Output directory (default: Mbed TLS or TF-PSA-Crypto root directory.)')

    args = parser.parse_args()

    if not build_tree.looks_like_root("."):
        raise Exception("This script must be run from Mbed TLS or TF-PSA-Crypto root.")

    if build_tree.looks_like_tf_psa_crypto_root("."):
        if args.list:
            file_paths = tf_psa_crypto_get_generated_file_paths()
            for file_path in file_paths:
                print(file_path)
        else:
            tf_psa_crypto_make_generated_files()

    if args.directory:
        print("Output directory specified")

if __name__ == "__main__":
    sys.exit(main())
